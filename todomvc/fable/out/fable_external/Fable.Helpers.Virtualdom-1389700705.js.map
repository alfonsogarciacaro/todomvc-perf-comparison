{"version":3,"sources":["../../node_modules/fable-import-virtualdom/Fable.Helpers.Virtualdom.fs"],"names":[],"mappings":"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","file":"Fable.Helpers.Virtualdom-1389700705.js","sourcesContent":["module Fable.Helpers.Virtualdom\n\nopen Fable.Core\n\n[<Import(\"h\",\"virtual-dom\")>]\nlet h(arg1: string, arg2: obj, arg3: obj[]): obj = failwith \"JS only\"\n\n[<Import(\"diff\",\"virtual-dom\")>] \nlet diff (tree1:obj) (tree2:obj): obj = failwith \"JS only\"\n\n[<Import(\"patch\",\"virtual-dom\")>] \nlet patch (node:obj) (patches:obj): Fable.Import.Browser.Node = failwith \"JS only\"\n\n[<Import(\"create\",\"virtual-dom\")>]\nlet createElement (e:obj): Fable.Import.Browser.Node = failwith \"JS only\"\n\nmodule Html =\n    [<AutoOpen>]\n    module Types =\n        type MouseEvent =\n            {\n                altKey: bool\n                screenX: int\n                screenY: int\n            }\n        type KeyboardEvent =\n            {\n                code: string\n                keyCode: int\n            }\n\n        type MouseEventHandler = string*(MouseEvent -> unit)\n        type KeyboardEventHandler = string*(KeyboardEvent -> unit)\n        type EventHandler = string*(obj -> unit)\n\n        type EventHandlerBinding =\n            | MouseEventHandler of MouseEventHandler\n            | KeyboardEventHandler of KeyboardEventHandler\n            | EventHandler of EventHandler\n\n        type Style = (string*string) list\n\n        type KeyValue = string*string\n\n        type Attribute =\n        | EventHandlerBinding of EventHandlerBinding\n        | Style of Style\n        | Property of KeyValue\n        | Attribute of KeyValue\n\n        type Element = string * Attribute list\n        /// A Node in Html have the following forms\n        type VoidElement = string * Attribute list\n        type Node =\n        /// A regular html element that can contain a list of other nodes\n        | Element of Element * Node list\n        /// A void element is one that can't have content, like link, br, hr, meta\n        /// See: https://dev.w3.org/html5/html-author/#void\n        | VoidElement of VoidElement\n        /// A text value for a node\n        | Text of string\n        /// Whitespace for formatting\n        | WhiteSpace of string\n\n    [<AutoOpen>]\n    module Tags =\n        let elem tagName attrs children = Element((tagName, attrs), children)\n        let voidElem tagName attrs = VoidElement(tagName, attrs)\n\n        let whiteSpace = WhiteSpace\n        let text = Text\n\n        // Elements - list of elements here: https://developer.mozilla.org/en-US/docs/Web/HTML/Element\n        // Void elements\n        let br = voidElem \"br\"\n        let area = voidElem \"area\"\n        let baseHtml = voidElem \"base\"\n        let col = voidElem \"col\"\n        let embed = voidElem \"embed\"\n        let hr = voidElem \"hr\"\n        let img = voidElem \"img\"\n        let input = voidElem \"input\"\n        let link = voidElem \"link\"\n        let meta = voidElem \"meta\"\n        let param = voidElem \"param\"\n        let source = voidElem \"source\"\n        let track = voidElem \"track\"\n        let wbr = voidElem \"wbr\"\n\n        // Metadata\n        let head = elem \"head\"\n        let style = elem \"style\"\n        let title = elem \"title\"\n\n        // Content sectioning\n        let address = elem \"address\"\n        let article = elem \"article\"\n        let aside = elem \"aside\"\n        let footer = elem \"footer\"\n        let header = elem \"header\"\n        let h1 = elem \"h1\"\n        let h2 = elem \"h2\"\n        let h3 = elem \"h3\"\n        let h4 = elem \"h4\"\n        let h5 = elem \"h5\"\n        let h6 = elem \"h6\"\n        let hgroup = elem \"hgroup\"\n        let nav = elem \"nav\"\n\n        // Text content\n        let dd = elem \"dd\"\n        let div = elem \"div\"\n        let dl = elem \"dl\"\n        let dt = elem \"dt\"\n        let figcaption = elem \"figcaption\"\n        let figure = elem \"figure\"\n        let li = elem \"li\"\n        let main = elem \"main\"\n        let ol = elem \"ol\"\n        let p = elem \"p\"\n        let pre = elem \"pre\"\n        let section = elem \"section\"\n        let ul = elem \"ul\"\n\n        // Inline text semantics\n        let a = elem \"a\"\n        let abbr = elem \"abbr\"\n        let b = elem \"b\"\n        let bdi = elem \"bdi\"\n        let bdo = elem \"bdo\"\n        let cite = elem \"cite\"\n        let code = elem \"code\"\n        let data = elem \"data\"\n        let dfn = elem \"dfn\"\n        let em = elem \"em\"\n        let i = elem \"i\"\n        let kbd = elem \"kbd\"\n        let mark = elem \"mark\"\n        let q = elem \"q\"\n        let rp = elem \"rp\"\n        let rt = elem \"rt\"\n        let rtc = elem \"rtc\"\n        let ruby = elem \"ruby\"\n        let s = elem \"s\"\n        let samp = elem \"samp\"\n        let small = elem \"small\"\n        let span = elem \"span\"\n        let strong = elem \"strong\"\n        let sub = elem \"sub\"\n        let sup = elem \"sup\"\n        let time = elem \"time\"\n        let u = elem \"u\"\n        let var = elem \"var\"\n\n        // Image and multimedia\n        let audio = elem \"audio\"\n        let map = elem \"map\"\n        let video = elem \"video\"\n\n        // Embedded content\n        let objectHtml = elem \"object\"\n\n        // Demarcasting edits\n        let del = elem \"del\"\n        let ins = elem \"ins\"\n\n        // Table content\n        let caption = elem \"caption\"\n        let colgroup = elem \"colgroup\"\n        let table = elem \"table\"\n        let tbody = elem \"tbody\"\n        let td = elem \"td\"\n        let tfoot = elem \"tfoot\"\n        let th = elem \"th\"\n        let thead = elem \"thead\"\n        let tr = elem \"tr\"\n\n        // Forms\n        let button = elem \"button\"\n        let datalist = elem \"datalist\"\n        let fieldset = elem \"fieldset\"\n        let form = elem \"form\"\n        let label = elem \"label\"\n        let legend = elem \"legend\"\n        let meter = elem \"meter\"\n        let optgroup = elem \"optgroup\"\n        let option = elem \"option\"\n        let output = elem \"output\"\n        let progress = elem \"progress\"\n        let select = elem \"select\"\n        let textarea = elem \"textarea\"\n\n        // Interactive elements\n        let details = elem \"details\"\n        let dialog = elem \"dialog\"\n        let menu = elem \"menu\"\n        let menuitem = elem \"menuitem\"\n        let summary = elem \"summary\"\n\n    [<AutoOpen>]\n    module Attributes =\n        let attribute key value = Attribute.Attribute (key,value)\n        let property key value = Attribute.Property (key,value)\n\n    [<AutoOpen>]\n    module Events =\n        let onMouseEvent eventType f = EventHandlerBinding (MouseEventHandler (eventType, f))\n\n        let onMouseClick = onMouseEvent \"onclick\"\n        let onContextMenu = onMouseEvent \"oncontextmenu\"\n        let onDblClick = onMouseEvent \"ondblclick\"\n        let onMouseDown = onMouseEvent \"onmousedown\"\n        let onMouseEnter = onMouseEvent \"onmouseenter\"\n        let onMouseLeave = onMouseEvent \"onmouseleave\"\n        let onMouseMove = onMouseEvent \"onmousemove\"\n        let onMouseOut = onMouseEvent \"onmouseout\"\n        let onMouseOver = onMouseEvent \"onmouseover\"\n        let onMouseUp = onMouseEvent \"onmouseup\"\n        let onShow = onMouseEvent \"onshow\"\n        let onKeyboardEvent eventType f = EventHandlerBinding (KeyboardEventHandler (eventType, f))\n        let onKeydown = onKeyboardEvent \"onkeydown\"\n        let onKeypress = onKeyboardEvent \"onkeypress\"\n        let onKeyup = onKeyboardEvent \"onkeyup\"\n\n        let onEvent eventType f = EventHandlerBinding (EventHandler (eventType, f))\n        let onAbort = onEvent \"onabort\"\n        let onAfterPrint = onEvent \"onafterprint\"\n        let onAudioEnd = onEvent \"onaudioend\"\n        let onAudioStart = onEvent \"onaudiostart\"\n        let onBeforePrint = onEvent \"onbeforeprint\"\n        let onCached = onEvent \"oncached\"\n        let onCanPlay = onEvent \"oncanplay\"\n        let onCanPlayThrough = onEvent \"oncanplaythrough\"\n        let onChange = onEvent \"onchange\"\n        let onChargingChange = onEvent \"onchargingchange\"\n        let onChargingTimeChange = onEvent \"onchargingtimechange\"\n        let onChecking = onEvent \"onchecking\"\n        let onClose = onEvent \"onclose\"\n        let onDischargingTimeChange = onEvent \"ondischargingtimechange\"\n        let onDOMContentLoaded = onEvent \"onDOMContentLoaded\"\n        let onDownloading = onEvent \"ondownloading\"\n        let onDurationchange = onEvent \"ondurationchange\"\n        let onEmptied = onEvent \"onemptied\"\n        let onEnd = onEvent \"onend\"\n        let onEnded = onEvent \"onended\"\n        let onError = onEvent \"onerror\"\n        let onCullScreenChange = onEvent \"onfullscreenchange\"\n        let onCullScreenError = onEvent \"onfullscreenerror\"\n        let onInput = onEvent \"oninput\"\n        let onInvalid = onEvent \"oninvalid\"\n        let onLanguageChange = onEvent \"onlanguagechange\"\n        let onLevelChange = onEvent \"onlevelchange\"\n        let onLoadedData = onEvent \"onloadeddata\"\n        let onLoadedMetaData = onEvent \"onloadedmetadata\"\n        let onNoUpdate = onEvent \"onnoupdate\"\n        let onObsolete = onEvent \"onobsolete\"\n        let onOffline = onEvent \"onoffline\"\n        let onOnline = onEvent \"ononline\"\n        let onOpen = onEvent \"onopen\"\n        let onOrientationChange = onEvent \"onorientationchange\"\n        let onPause = onEvent \"onpause\"\n        let onPointerlockchange = onEvent \"onpointerlockchange\"\n        let onPointerlockerror = onEvent \"onpointerlockerror\"\n        let onPlay = onEvent \"onplay\"\n        let onPlaying = onEvent \"onplaying\"\n        let onRateChange = onEvent \"onratechange\"\n        let onReadyStateChange = onEvent \"onreadystatechange\"\n        let onReset = onEvent \"onreset\"\n        let onSeeked = onEvent \"onseeked\"\n        let onSeeking = onEvent \"onseeking\"\n        let onSelectStart = onEvent \"onselectstart\"\n        let onSelectionChange = onEvent \"onselectionchange\"\n        let onSoundEnd = onEvent \"onsoundend\"\n        let onSoundStart = onEvent \"onsoundstart\"\n        let onSpeechEnd = onEvent \"onspeechend\"\n        let onSpeechStart = onEvent \"onspeechstart\"\n        let onStalled = onEvent \"onstalled\"\n        let onStart = onEvent \"onstart\"\n        let onSubmit = onEvent \"onsubmit\"\n        let onSuccess = onEvent \"onsuccess\"\n        let onSuspend = onEvent \"onsuspend\"\n        let onTimeUpdate = onEvent \"ontimeupdate\"\n        let onUpdateReady = onEvent \"onupdateready\"\n        let onVoicesChanged = onEvent \"onvoiceschanged\"\n        let onVisibilityChange = onEvent \"onvisibilitychange\"\n        let onVolumeChange = onEvent \"onvolumechange\"\n        let onVrdisplayConnected = onEvent \"onvrdisplayconnected\"\n        let onVrdisplayDisconnected = onEvent \"onvrdisplaydisconnected\"\n        let onVrdisplayPresentChange = onEvent \"onvrdisplaypresentchange\"\n        let onWaiting = onEvent \"onwaiting\"\n\n        let onBlur = onEvent \"onblur\"\n        let onFocus = onEvent \"onfocus\"\n\nopen Html\nopen Fable.Import.Browser\n\n[<AutoOpen>]\nmodule App =\n    type Observer<'T>(next, error, completed) =\n        interface System.IObserver<'T> with\n            member x.OnCompleted() = completed()\n            member x.OnError(e) = error e\n            member x.OnNext(v) = next v\n\n    type AppState<'TModel, 'TMessage> = {\n            Model: 'TModel\n            View: ('TMessage -> unit) -> 'TModel -> Html.Types.Node\n            Update: 'TModel -> 'TMessage -> ('TModel * ((unit -> unit) list)) }\n\n\n    type AppEvents<'TMessage, 'TModel> =\n        | ModelChanged of 'TModel*'TModel\n        | ActionReceived of 'TMessage\n\n    type Subscriber<'TMessage, 'TModel> = AppEvents<'TMessage, 'TModel> -> unit\n\n    type App<'TModel, 'TMessage> =\n        {\n            AppState: AppState<'TModel, 'TMessage>\n            Node: Node option\n            CurrentTree: obj option\n            Subscribers: Map<string, Subscriber<'TMessage, 'TModel>>\n            NodeSelector: string option\n        }\n\n    let createApp appState =\n        {\n            AppState = appState\n            Node = None\n            CurrentTree = None\n            Subscribers = Map.empty\n            NodeSelector = None\n        }\n\n    let withStartNode selector app = { app with NodeSelector = Some selector }\n    let withSubscriber subscriberId subscriber app =\n        let subsribers = app.Subscribers |> Map.add subscriberId subscriber\n        { app with Subscribers = subsribers }\n\n    type AppMessage<'TMessage> =\n        | AddSubscriber of string*Subscriber<'TMessage, 'TMessage>\n        | RemoveSubscriber of string\n        | Message of 'TMessage\n\n    type Renderer =\n        {\n            Render: Html.Types.Node -> obj\n            Diff: obj -> obj -> obj\n            Patch: Fable.Import.Browser.Node -> obj -> Fable.Import.Browser.Node\n            CreateElement: obj -> Fable.Import.Browser.Node\n        }\n\n    let start renderer app =\n        let renderTree view handler model =\n            view handler model\n            |> renderer.Render\n\n        let startElem =\n            match app.NodeSelector with\n            | None -> document.body\n            | Some sel -> document.body.querySelector(sel) :?> HTMLElement\n\n        MailboxProcessor.Start(fun inbox ->\n            let post message =\n                inbox.Post (Message message)\n\n            let notifySubscribers subs model =\n                subs |> Map.iter (fun key handler -> handler model)\n\n            let rec loop state =\n                async {\n                    match state.Node, state.CurrentTree with\n                    | None,_ ->\n                        let tree = renderTree state.AppState.View post state.AppState.Model\n                        let rootNode = renderer.CreateElement tree\n                        startElem.appendChild(rootNode) |> ignore\n                        return! loop {state with CurrentTree = Some tree; Node = Some rootNode}\n                    | Some rootNode, Some currentTree ->\n                        let! message = inbox.Receive()\n                        match message with\n                        | Message msg ->\n                            ActionReceived msg |> (notifySubscribers state.Subscribers)\n                            let (model', jsCalls) = state.AppState.Update state.AppState.Model msg\n                            let tree = renderTree state.AppState.View post model'\n                            let patches = renderer.Diff currentTree tree\n                            notifySubscribers state.Subscribers (ModelChanged (model', state.AppState.Model))\n                            renderer.Patch rootNode patches |> ignore\n                            jsCalls |> List.iter (fun i -> i())\n                            return! loop {state with AppState = {state.AppState with Model = model'}; CurrentTree = Some tree}\n                        | _ -> return! loop state\n                    | _ -> failwith \"Shouldn't happen\"\n                }\n            loop app)\n\nlet createTree tag attributes children =\n    let renderEventHandler (eventType, handler) = eventType, handler\n\n    let renderEventBinding binding =\n        match binding with\n        | MouseEventHandler (eventType, handler) -> (eventType, handler :> obj)//renderMouseEventHandler mh\n        | KeyboardEventHandler (eventType, handler) -> (eventType, handler :> obj)\n        | EventHandler (eventType, handler) -> (eventType, handler :> obj)\n        |> renderEventHandler\n\n    let renderAttributes attributes =\n        attributes\n        |> List.map (function\n                        | Attribute.Attribute (k,v) -> Some (k ==> v)\n                        | _ -> None)\n        |> List.choose id\n        |> (function\n            | [] -> None\n            | p -> Some (\"attributes\" ==> (p |> createObj)))\n\n    let toAttrs attrs =\n        let (attributes, others) = attrs |> List.partition (function Attribute _ -> true | _ -> false)\n        let renderedAttributes = attributes |> renderAttributes\n        let renderedOthers =\n            others\n            |> List.map (function\n                    | EventHandlerBinding binding -> binding |> renderEventBinding\n                    | Style style ->\n                        let styleObj =\n                            style\n                            |> List.map (fun (k,v) -> k ==> v)\n                            |> createObj\n\n                        \"style\" ==> styleObj\n                    | Property (key, value) -> key ==> value\n                    | Attribute _ -> failwith \"Should not happen\"\n                )\n        match renderedAttributes with\n        | Some x -> x::renderedOthers\n        | _ -> renderedOthers\n        |> createObj\n\n    let hAttrs = attributes |> toAttrs\n    let childrenArr = children |> List.toArray\n    h(tag, hAttrs, childrenArr)\n\nlet rec render node =\n    match node with\n    | Element((tag,attrs), nodes) -> createTree tag attrs (nodes |> List.map render)\n    | VoidElement (tag, attrs) -> createTree tag attrs []\n    | Text str -> box(string str)\n    | WhiteSpace str -> box(string str)\n\nlet renderer =\n    {\n        Render = render\n        Diff = diff\n        Patch = patch\n        CreateElement = createElement\n    }\n"]}